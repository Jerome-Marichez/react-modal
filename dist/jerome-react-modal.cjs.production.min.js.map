{"version":3,"file":"jerome-react-modal.cjs.production.min.js","sources":["../src/Modal.tsx","../node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["import \"./Modal.css\";\r\nimport React from \"react\";\r\n\r\nexport interface ModalProps {\r\n\tisOpen: boolean;\r\n\tcontentBody: string | JSX.Element;\r\n\tonClose: () => void;\r\n\r\n\tcloseButton?: JSX.Element;\r\n\tcontentFooter?: JSX.Element;\r\n\tcontentHeader?: JSX.Element;\r\n\r\n\tbackground?: string;\r\n\tmodalAlign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\" | \"sub\" | \"text-top\";\r\n\tmodalRadius?: string;\r\n\tmodalBackground?: string;\r\n\tmodalShadow?: string;\r\n\tmodalMinWidth?: string;\r\n}\r\n\r\n/**\r\n * \r\n * @param isOpen A boolean with state True if Modal is show, false if Modal is not show\r\n * @param contentBody A content body display inside modal can be string or a JSX.Element\r\n * @param onClose A callback function enabled at Click of Exit Button ex: \"onClose={() => { setModalOpen(false); }}\" \r\n * @param closeButton A optional parameter who allow to display a JSX.Element as a Close Button\r\n * @param contentHeader A optional paramater who allow to display a JSX.Element as a Header\r\n * @param contentFooter A optional paramater who allow to display a JSX.Element as a footer\r\n * @param background A optional parameter to set background propriety behind Modal (ex: \"rgba(0, 0, 0, 0.75)\")\r\n * @param modalAlign A optional parameter who allow to display Modal in center top or bottom (check: https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align to see options) \r\n * @param modalRadius A optional parameter to set radius of Modal Form (ex: \"8px\")\r\n * @param modalBackground A optional parameter to set css background propriety (ex: \"grey\")\r\n * @param modalShadow A optional parameter to set box-shadow propriety (ex: \"0 0 10px #000\")\r\n * @param modalMinWidth A optional parameter to set min-width propriety of modal (ex: \"500px\")\r\n * @returns A Modal with his content\r\n */\r\n\r\nfunction Modal(props: ModalProps): JSX.Element {\r\n\r\n\tconst { isOpen, contentBody, onClose } = props; // Minimal Props\r\n\tconst { closeButton, contentFooter, contentHeader } = props; // Custom JSX.Element Props\r\n\tconst { background, modalAlign, modalRadius, modalBackground, modalShadow, modalMinWidth } = props; // CSS Custom Propriety \r\n\r\n\treturn (\r\n\t\t<div data-testid=\"blocker\" className=\"blocker\" style={{\r\n\t\t\tdisplay: isOpen ? \"inline-block\" : \"none\",\r\n\t\t\tbackground: background ? background : \"rgba(0, 0, 0, 0.75)\",\r\n\t\t}}>\r\n\t\t\t<div data-testid=\"modal\" className=\"modal\"\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tverticalAlign: modalAlign ? modalAlign : \"middle\",\r\n\t\t\t\t\tminWidth: modalMinWidth ? modalMinWidth : \"\",\r\n\t\t\t\t\tbackground: modalBackground ? modalBackground : \"#FFF\",\r\n\t\t\t\t\tborderRadius: modalRadius ? modalRadius : \"8px\",\r\n\t\t\t\t\tboxShadow: modalShadow ? modalShadow : \"0 0 10px #000\"\r\n\t\t\t\t}}>\r\n\t\t\t\t{contentHeader ? contentHeader : \"\"}\r\n\t\t\t\t{contentBody}\r\n\t\t\t\t{contentFooter ? contentFooter : \"\"}\r\n\t\t\t\t<a href=\"#close-modal\" onClick={onClose} className={closeButton ? \"close-modal-custom\" : \"close-modal\"}>\r\n\t\t\t\t\t{closeButton ? closeButton : \"Close\"}\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default React.memo(Modal);","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["Modal","props","closeButton","React","className","style","display","isOpen","background","verticalAlign","modalAlign","minWidth","modalMinWidth","modalBackground","borderRadius","modalRadius","boxShadow","modalShadow","contentHeader","contentBody","contentFooter","href","onClick","onClose","css","ref","insertAt","document","head","getElementsByTagName","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","memo"],"mappings":"gJAqCA,SAASA,EAAMC,GAEd,IACQC,EAA8CD,EAA9CC,YAGR,OACCC,qCAAiB,UAAUC,UAAU,UAAUC,MAAO,CACrDC,QANuCL,EAAjCM,OAMY,eAAiB,OACnCC,WAL2FP,EAArFO,YAKgC,wBAEtCL,qCAAiB,QAAQC,UAAU,QAClCC,MAAO,CACNI,cATyFR,EAAzES,YASyB,SACzCC,SAVyFV,EAAlBW,eAU7B,GAC1CJ,WAXyFP,EAAhDY,iBAWO,OAChDC,aAZyFb,EAA7Dc,aAYc,MAC1CC,UAbyFf,EAA/BgB,aAanB,kBAdWhB,EAAlBiB,eAgBA,GAjBKjB,EAAzBkB,YACsClB,EAAjCmB,eAkBe,GACjCjB,qBAAGkB,KAAK,eAAeC,QApBerB,EAAZsB,QAoBenB,UAAWF,EAAc,qBAAuB,eACvFA,GAA4B,YC5DlC,SAAqBsB,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAgC,oBAAbC,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DxB,EAAQsB,SAASG,cAAc,SACnCzB,EAAM0B,KAAO,WAEI,QAAbL,GACEE,EAAKI,WACPJ,EAAKK,aAAa5B,EAAOuB,EAAKI,YAKhCJ,EAAKM,YAAY7B,GAGfA,EAAM8B,WACR9B,EAAM8B,WAAWC,QAAUZ,EAE3BnB,EAAM6B,YAAYP,SAASU,eAAeb,kwED4C/BrB,EAAMmC,KAAKtC"}